name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy-prod:
    runs-on: ubuntu-latest

    permissions:  # âœ… Required for private repo commenting & release
      contents: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run lint
        run: pnpm run lint

      - name: Build for production
        run: pnpm run build:prod
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.VITE_FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.VITE_FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.VITE_FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.VITE_FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.VITE_FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.VITE_FIREBASE_MEASUREMENT_ID }}

      - name: Setup Firebase CLI
        run: pnpm install -g firebase-tools

      - name: Deploy to Firebase Hosting (Production)
        run: |
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT }}" > firebase-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="firebase-service-account.json"

          cat > firebase.json << EOF
          {
            "hosting": {
              "public": "build/prod",
              "ignore": [
                "firebase.json",
                "**/.*",
                "**/node_modules/**"
              ],
              "rewrites": [
                {
                  "source": "**",
                  "destination": "/index.html"
                }
              ],
              "headers": [
                {
                  "source": "**/*.@(js|css)",
                  "headers": [
                    { "key": "Cache-Control", "value": "max-age=31536000" }
                  ]
                },
                {
                  "source": "**/*.@(png|jpg|jpeg|gif|svg|webp)",
                  "headers": [
                    { "key": "Cache-Control", "value": "max-age=31536000" }
                  ]
                }
              ]
            }
          }
          EOF

          firebase deploy --only hosting --project ${{ secrets.VITE_FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

      - name: Get deployment URL
        id: deploy_url
        run: |
          URL="https://${{ secrets.VITE_FIREBASE_PROJECT_ID }}.web.app"
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Production site deployed to: $URL"

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1  # âœ… Updated release action
        with:
          tag_name: v${{ github.run_number }}
          name: Production Release v${{ github.run_number }}
          body: |
            ## ðŸš€ Production Deployment
            
            **Deployed to**: [${{ steps.deploy_url.outputs.url }}](${{ steps.deploy_url.outputs.url }})
            **Commit**: ${{ github.sha }}
            **Build Number**: ${{ github.run_number }}
            **Deployed At**: ${{ github.event.head_commit.timestamp }}
            
            ### Changes
            ${{ github.event.head_commit.message }}
            
            ### Deployment Info
            - Environment: Production
            - Firebase Project: ${{ secrets.VITE_FIREBASE_PROJECT_ID }}
            - Node.js Version: 18
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify deployment success
        uses: actions/github-script@v7
        with:
          script: |
            const deployUrl = '${{ steps.deploy_url.outputs.url }}';
            const releaseUrl = '${{ steps.create_release.outputs.url }}';
            const commitSha = context.sha.substring(0, 7);

            const comment = `## ðŸŽ‰ Production Deployment Successful

            **Status**: âœ… Live in Production  
            **Commit**: ${commitSha}  
            **URL**: [${deployUrl}](${deployUrl})  
            **Release**: [v${{ github.run_number }}](${releaseUrl})

            **Build**: #${{ github.run_number }}  
            **Time**: ${new Date().toISOString()}`;

            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: comment
            });

      - name: Cleanup service account file
        run: rm -f firebase-service-account.json
